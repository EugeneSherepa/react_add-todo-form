{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","helpers/helpers.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","preparedTodos","userId","users","find","App","useState","setTodos","setTitle","selectedUser","setSelectedUser","isTitleValid","setIsTitleValid","isUserValid","setIsUserValid","action","method","onSubmit","event","preventDefault","trim","currentTodos","userName","maxTodoId","Math","max","newUser","type","value","placeholder","onChange","target","replace","Boolean","disabled","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be37c249.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = (({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n));\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/todo';\nimport { getUserById, getUserByName } from './helpers/helpers';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst preparedTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isTitleValid, setIsTitleValid] = useState<string | boolean>(true);\n  const [isUserValid, setIsUserValid] = useState<string | boolean>(true);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitle(value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n    setIsTitleValid(value);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(value);\n    setIsUserValid(Boolean(value));\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsTitleValid(title.trim());\n    setIsUserValid(selectedUser);\n\n    if (!title.trim() || !selectedUser) {\n      return;\n    }\n\n    setTodos((currentTodos) => {\n      const maxTodoId = Math.max(...currentTodos.map(todo => todo.id));\n      const newUser = getUserByName(selectedUser);\n\n      return [\n        ...currentTodos,\n        {\n          id: maxTodoId + 1,\n          title,\n          completed: false,\n          userId: newUser\n            ? newUser.id\n            : -1,\n          user: newUser,\n        },\n      ];\n    });\n\n    setTitle('');\n    setSelectedUser('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              data-cy=\"titleInput\"\n              type=\"text\"\n              value={title}\n              placeholder=\"Enter a title\"\n              onChange={handleTitleChange}\n            />\n          </label>\n\n          {!isTitleValid && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser}\n              onChange={handleUserChange}\n            >\n              <option value=\"\" disabled>\n                Choose a user\n              </option>\n\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.name}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {!isUserValid && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../types/user';\nimport users from '../api/users';\n\nexport const getUserById = (userId: number): User | null => (\n  users.find((user) => user.id === userId) || null\n);\n\nexport const getUserByName = (userName: string): User | null => (\n  users.find((user) => user.name === userName) || null\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}